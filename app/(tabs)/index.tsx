import React, { useState } from "react";
import { 
  StyleSheet, 
  Text, 
  View, 
  ScrollView, 
  Alert
} from "react-native";
import { useRouter } from "expo-router";
import { Info } from "lucide-react-native";
import { colors } from "@/constants/colors";
import TextInputBox from "@/components/TextInputBox";
import GradientButton from "@/components/GradientButton";
import { useAnalysisStore } from "@/hooks/useAnalysisStore";
import { useUserStore } from "@/hooks/useUserStore";

export default function CheckScreen() {
  const router = useRouter();
  const [text, setText] = useState("");
  const [documentTitle, setDocumentTitle] = useState("Untitled Document");
  const [uploadedFile, setUploadedFile] = useState<{
    uri: string;
    name: string;
    type: string;
  } | null>(null);

  const { analyzeText, isAnalyzing } = useAnalysisStore();
  const { user, decrementChecksRemaining } = useUserStore();

  const handleAnalyze = async () => {
    if (!text && !uploadedFile) {
      Alert.alert(
        "Empty Content",
        "Please enter text or upload a document to analyze."
      );
      return;
    }

    if (!user) {
      Alert.alert(
        "Sign In Required",
        "Please sign in to analyze content.",
        [{ text: "Go to Account", onPress: () => router.push("/account") }]
      );
      return;
    }

    if (user.subscription.checksRemaining <= 0) {
      Alert.alert(
        "No Checks Remaining",
        "You've used all your available checks. Please upgrade your subscription.",
        [{ text: "View Plans", onPress: () => router.push("/account") }]
      );
      return;
    }

    try {
      // In a real app, we would extract text from the uploaded file here
      // For demo purposes, we'll just use the text input
      const contentToAnalyze = text || "Sample content from uploaded document";
      const title = documentTitle || uploadedFile?.name || "Untitled Document";
      
      const result = await analyzeText(contentToAnalyze, title);
      await decrementChecksRemaining();
      
      // Navigate to results
      router.push(`/results/${result.id}`);
    } catch (error) {
      console.error("Analysis failed:", error);
      Alert.alert(
        "Analysis Failed",
        "There was an error analyzing your content. Please try again."
      );
    }
  };

  const handleUpload = (uri: string, name: string, type: string) => {
    setUploadedFile({ uri, name, type });
    setDocumentTitle(name.split(".")[0]);
    
    // In a real app, we would extract text from the file here
    // For demo purposes, we'll just set a placeholder
    setText("Content extracted from uploaded document");
  };

  return (
    <ScrollView 
      style={styles.container}
      contentContainerStyle={styles.contentContainer}
      keyboardShouldPersistTaps="handled"
    >
      <View style={styles.header}>
        <Text style={styles.title}>Check Content Authenticity</Text>
        <Text style={styles.subtitle}>
          Verify if your content was written by a human or generated by AI
        </Text>
      </View>

      <View style={styles.infoBox}>
        <Info size={18} color={colors.primary} />
        <Text style={styles.infoText}>
          Paste your text or upload a document to analyze. Our AI will determine if the content was human-written or AI-generated.
        </Text>
      </View>

      {user && (
        <View style={styles.checksRemaining}>
          <Text style={styles.checksText}>
            Checks remaining: <Text style={styles.checksCount}>{user.subscription.checksRemaining}</Text>
          </Text>
        </View>
      )}

      <TextInputBox
        value={text}
        onChangeText={setText}
        onUpload={handleUpload}
        minHeight={200}
      />

      <GradientButton
        title={isAnalyzing ? "Analyzing..." : "Analyze Content"}
        onPress={handleAnalyze}
        isLoading={isAnalyzing}
        disabled={isAnalyzing || (!text && !uploadedFile)}
      />

      <View style={styles.footer}>
        <Text style={styles.footerText}>
          By using this service, you agree to our Terms of Service and Privacy Policy
        </Text>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  contentContainer: {
    padding: 20,
    paddingBottom: 40,
  },
  header: {
    marginBottom: 24,
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    color: colors.text,
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: colors.textSecondary,
    lineHeight: 22,
  },
  infoBox: {
    flexDirection: "row",
    backgroundColor: colors.primary + "10",
    borderRadius: 12,
    padding: 16,
    marginBottom: 24,
  },
  infoText: {
    flex: 1,
    marginLeft: 12,
    color: colors.text,
    fontSize: 14,
    lineHeight: 20,
  },
  checksRemaining: {
    marginBottom: 16,
  },
  checksText: {
    fontSize: 14,
    color: colors.textSecondary,
  },
  checksCount: {
    fontWeight: "bold",
    color: colors.primary,
  },
  footer: {
    marginTop: 24,
    alignItems: "center",
  },
  footerText: {
    fontSize: 12,
    color: colors.textSecondary,
    textAlign: "center",
  },
});