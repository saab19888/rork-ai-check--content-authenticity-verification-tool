import { Platform } from 'react-native';

interface ChatGPTMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface ChatGPTResponse {
  completion: string;
}

interface AnalysisResponse {
  classification: 'human' | 'ai' | 'mixed';
  confidenceScore: number;
  reasoning: string;
  suspiciousSegments?: {
    text: string;
    startIndex: number;
    endIndex: number;
    score: number;
  }[];
}

class ChatGPTService {
  private apiUrl = 'https://toolkit.rork.com/text/llm/';
  private apiKey: string;

  constructor() {
    // Get the API key from environment variable
    this.apiKey = process.env.EXPO_PUBLIC_CHATGPT_KEY || '';
    
    if (!this.apiKey) {
      console.warn('ChatGPT API key not found in environment variables');
    }
  }

  private async makeRequest(messages: ChatGPTMessage[]): Promise<string> {
    try {
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages,
          apiKey: this.apiKey
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data: ChatGPTResponse = await response.json();
      return data.completion;
    } catch (error) {
      console.error('ChatGPT API request failed:', error);
      throw new Error('Failed to analyze content with ChatGPT');
    }
  }

  async analyzeText(text: string): Promise<AnalysisResponse> {
    if (!this.apiKey) {
      throw new Error('ChatGPT API key not configured');
    }

    const systemPrompt = `You are an expert AI content detector. Analyze the provided text and determine if it was written by a human or generated by AI.

Provide your response in the following JSON format:
{
  "classification": "human" | "ai" | "mixed",
  "confidenceScore": number (0-100),
  "reasoning": "Brief explanation of your analysis",
  "suspiciousSegments": [
    {
      "text": "suspicious text segment",
      "startIndex": number,
      "endIndex": number,
      "score": number (0-1)
    }
  ]
}

Consider these factors:
- Repetitive patterns or phrases
- Unnatural sentence structures
- Overly formal or robotic language
- Lack of personal voice or style
- Perfect grammar without natural imperfections
- Generic or templated responses
- Inconsistent writing style

If the text appears to be human-written, set suspiciousSegments to an empty array.`;

    const userPrompt = `Please analyze this text for AI generation:

"${text}"`;

    const messages: ChatGPTMessage[] = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt }
    ];

    try {
      const response = await this.makeRequest(messages);
      
      // Parse the JSON response
      const analysisResult = JSON.parse(response) as AnalysisResponse;
      
      // Validate the response structure
      if (!analysisResult.classification || 
          typeof analysisResult.confidenceScore !== 'number' ||
          !analysisResult.reasoning) {
        throw new Error('Invalid response format from ChatGPT');
      }

      // Ensure confidence score is within valid range
      analysisResult.confidenceScore = Math.max(0, Math.min(100, analysisResult.confidenceScore));

      return analysisResult;
    } catch (parseError) {
      console.error('Failed to parse ChatGPT response:', parseError);
      
      // Fallback: try to extract information from raw response
      const response = await this.makeRequest(messages);
      return this.parseUnstructuredResponse(response, text);
    }
  }

  private parseUnstructuredResponse(response: string, originalText: string): AnalysisResponse {
    // Fallback parsing for unstructured responses
    const lowerResponse = response.toLowerCase();
    
    let classification: 'human' | 'ai' | 'mixed' = 'mixed';
    let confidenceScore = 50;
    
    if (lowerResponse.includes('human') && !lowerResponse.includes('ai-generated')) {
      classification = 'human';
      confidenceScore = 75;
    } else if (lowerResponse.includes('ai') || lowerResponse.includes('artificial intelligence')) {
      classification = 'ai';
      confidenceScore = 80;
    }
    
    // Extract confidence if mentioned
    const confidenceMatch = response.match(/(\d+)%/);
    if (confidenceMatch) {
      confidenceScore = parseInt(confidenceMatch[1]);
    }

    return {
      classification,
      confidenceScore,
      reasoning: response.substring(0, 200) + (response.length > 200 ? '...' : ''),
      suspiciousSegments: classification !== 'human' ? [{
        text: originalText.substring(0, 100) + (originalText.length > 100 ? '...' : ''),
        startIndex: 0,
        endIndex: Math.min(100, originalText.length),
        score: 0.7
      }] : []
    };
  }

  isConfigured(): boolean {
    return !!this.apiKey;
  }
}

export const chatGPTService = new ChatGPTService();
export type { AnalysisResponse };